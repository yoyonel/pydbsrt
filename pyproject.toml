[build-system]
requires = ["pbr", "poetry-core>=1.0.0", "setuptools", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pydbsrt"
version = "0.1.0"
description = ""
authors = ["ATTY Lionel <lionel.atty@365talents.com>"]
classifiers = [
    # complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'Operating System :: Unix',
    'Operating System :: POSIX',
    'Operating System :: Microsoft :: Windows',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Topic :: Utilities',
]

[tool.poetry.dependencies]
python = "^3.8"
bitstring = ">=3.1.5"
Distance = ">=0.1.3"
fuzzywuzzy = { extras = ["speedup"], version = "^0.18.0" }
ImageHash = ">=4.0"
imageio = ">=2.3.0"
imageio-ffmpeg = ">=0.2.0"
prettyprint = ">=0.1.5"
pysrt = ">=1.1.1"
python-Levenshtein = ">=0.12.0"
python-opensubtitles = ">=0.2.dev0"
googletrans = ">=2.4.0"
tqdm = ">=4.24.0"
Pillow = "^8.0.1"
psycopg2 = "^2.8.6"
python-sql = "^1.2.1"
SQLAlchemy = "^1.3.20"
imohash = "1.0.4"
sqltap = "0.3.11"
contexttimer = "^0.3.3"
rich = { extras = ["spinner"], version = "^9.3.0" }
click = "^7.1.2"
click-pathlib = "^2020.3.13"
asyncpg = "^0.21.0"
uvloop = "^0.14.0"
more-itertools = "^8.6.0"
msgpack = "^1.0.0"
ujson = "^4.0.1"
yaspin = "^1.2.0"
dictdiffer = "^0.8.1"
# https://github.com/maxfischer2781/asyncstdlib
asyncstdlib = "^3.9.2"
aiofiles = "^0.7.0"
loguru = "^0.5.3"
IMDbPY = "^2021.4.18"
googlesearch-python = "^1.0.1"
httpx = "^0.20.0"
pandas = "^1.3.4"
types-requests = "^2.26.0"

[tool.poetry.dev-dependencies]
pytest = "^6.1.2"
pre-commit = "^2.9.3"
sh = "^1.14.1"
pytest-shell = "^0.2.3"
pytest-click = "^1.0.2"
pytest-postgresql = "^2.5.2"
pytest-lazy-fixture = "^0.6.3"
pytest-docker-db = "^1.1.0"
pytest-asyncio = "^0.15.1"
pytest-docker-compose = "^3.2.1"
coverage = "^5.5"
waiting = "^1.4.1"
bandit = "^1.7.0"
pytest-mock = "3.6.1"
poethepoet = "^0.10.0"
pytest-cache = "^1.0"
pytest-cov = "^2.12.1"
black = "^21.7b0"
flake8 = "^3.9.2"
isort = "^5.9.3"
mypy = "^0.910"
mypy-extensions = "^0.4.3"
types-aiofiles = "^0.1.7"
types-click = "^7.1.2"
pytest-sugar = "^0.9.4"
pytest-picked = "^0.4.6"
# https://github.com/freakboy3742/pytest-tldr
tox-poetry-installer = {extras = ["poetry"], version = "^0.8.1"}
ptpython = "^3.0.20"

[tool.unimport]
sources = ["src"]
exclude = 'src/pydbsrt/services/old/'
gitignore = true
requirements = true
remove = true
diff = true

# https://docs.pytest.org/en/stable/warnings.html#deprecationwarning-and-pendingdeprecationwarning
[tool.pytest.ini_options]
testpaths = "tests"
log_cli = false
log_cli_level = "INFO"
junit_family = "xunit2"
filterwarnings = [
    "ignore:.*U.*mode is deprecated:DeprecationWarning",
]

# https://github.com/pytest-docker-compose/pytest-docker-compose
db-volume-args = "docker_test_bktreedb-data:/var/lib/postgresql/data"
db-image = "docker_bktreedb:test"
db-name = "bktreedb"
db-port = 5432
db-host-port = 5432
addopts = "--durations=0 --durations-min=0.2 --doctest-modules --docker-compose=docker/docker-compose.test.yml --use-running-containers --docker-compose-no-build"

[tool.black]
line-length = 120
skip-string-normalization = true

[tool.isort]
profile = "black"
src_paths = ["src", "test", "setup.py"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120

[tool.poe.tasks]
init = { cmd = "poetry install", help = "Install the required packages" }
format-source = { cmd = "pre-commit run --all-files black", help = "Format source code" }
format-imports = { cmd = "pre-commit run --all-files isort", help = "Sort the imports" }
format-unimport = { cmd = "pre-commit run --all-files unimport", help = "Remove unused imports" }
format = { sequence = [
  "format-source",
  "format-imports",
    "format-unimport",
], help = "All formatting at once" }

check-flake8 = { cmd = "pre-commit run --all-files flake8", help = "Check code style (with flake8)"}
check-vulnerabilities = { cmd = "pre-commit run --all-files bandit", help = "Perform security linting"}
check-grammar = { cmd = "pre-commit run --all-file mypy", help = "Check grammar with mypy" }
check = { sequence = [
    "check-flake8",
  "check-vulnerabilities",
  "check-grammar",
], help = "All check at once" }

pre-commits = { cmd = "pre-commit run --all-files", help="rull all pre-commits hook at once"}

[tool.poe.tasks.wheel]
cmd = "pip wheel --use-feature=in-tree-build -w wheels --no-deps ."
help = "Build wheel in ./wheels"

[tool.poe.tasks.test]
cmd = "pytest --cov=./src --cov-report term --cov-report html --junit-xml=junit-report.xml"
help = "Run tests with coverage"

[tool.poe.tasks.test-picked]
# https://github.com/anapaulagomes/pytest-picked
cmd = "pytest --picked"
help="Run tests on unstaged (according to git) modifications"

[tool.poe.tasks.clean]
cmd = """
rm -rf .coverage
       .mypy_cache
       .pytest_cache
       dist
       wheels
       ./**/__pycache__
"""
help = "Clean the environment"
